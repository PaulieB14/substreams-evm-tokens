// @generated
// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Events {
    #[prost(message, repeated, tag="1")]
    pub swaps: ::prost::alloc::vec::Vec<Swap>,
    #[prost(message, repeated, tag="2")]
    pub syncs: ::prost::alloc::vec::Vec<Sync>,
    #[prost(message, repeated, tag="3")]
    pub pairs_created: ::prost::alloc::vec::Vec<PairCreated>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PairCreated {
    /// -- transaction --
    #[prost(bytes="vec", tag="1")]
    pub transaction_id: ::prost::alloc::vec::Vec<u8>,
    /// -- log --
    ///
    /// log.address (factory)
    #[prost(bytes="vec", tag="5")]
    pub address: ::prost::alloc::vec::Vec<u8>,
    /// -- ordering --
    ///
    /// log.ordinal
    #[prost(uint64, tag="10")]
    pub ordinal: u64,
    /// -- pool created --
    #[prost(bytes="vec", tag="20")]
    pub token0: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="21")]
    pub token1: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="22")]
    pub pair: ::prost::alloc::vec::Vec<u8>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Sync {
    /// -- transaction --
    #[prost(bytes="vec", tag="1")]
    pub transaction_id: ::prost::alloc::vec::Vec<u8>,
    /// -- log --
    #[prost(bytes="vec", tag="5")]
    pub address: ::prost::alloc::vec::Vec<u8>,
    /// -- ordering --
    ///
    /// log.ordinal
    #[prost(uint64, tag="10")]
    pub ordinal: u64,
    /// -- sync --
    ///
    /// uint112
    #[prost(string, tag="20")]
    pub reserve0: ::prost::alloc::string::String,
    /// uint112
    #[prost(string, tag="21")]
    pub reserve1: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Swap {
    /// -- transaction --
    #[prost(bytes="vec", tag="1")]
    pub transaction_id: ::prost::alloc::vec::Vec<u8>,
    /// -- log --
    ///
    /// log.address
    #[prost(bytes="vec", tag="5")]
    pub address: ::prost::alloc::vec::Vec<u8>,
    /// -- ordering --
    ///
    /// log.ordinal
    #[prost(uint64, tag="10")]
    pub ordinal: u64,
    /// -- swap --
    ///
    /// uint256
    #[prost(string, tag="20")]
    pub amount0_in: ::prost::alloc::string::String,
    /// uint256
    #[prost(string, tag="21")]
    pub amount0_out: ::prost::alloc::string::String,
    /// uint256
    #[prost(string, tag="22")]
    pub amount1_in: ::prost::alloc::string::String,
    /// uint256
    #[prost(string, tag="23")]
    pub amount1_out: ::prost::alloc::string::String,
    #[prost(bytes="vec", tag="24")]
    pub sender: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="25")]
    pub to: ::prost::alloc::vec::Vec<u8>,
}
// @@protoc_insertion_point(module)
