// @generated
// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Events {
    #[prost(message, repeated, tag="1")]
    pub transfers: ::prost::alloc::vec::Vec<Transfer>,
    #[prost(message, repeated, tag="2")]
    pub balance_changes: ::prost::alloc::vec::Vec<BalanceChange>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BalanceChange {
    /// -- transaction --
    #[prost(bytes="vec", optional, tag="5")]
    pub transaction_id: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    /// -- call --
    #[prost(bytes="vec", optional, tag="8")]
    pub caller: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    /// -- ordering --
    ///
    /// storage_change.ordinal or balance_change.ordinal
    #[prost(uint64, tag="10")]
    pub ordinal: u64,
    /// relative index
    #[prost(uint64, tag="11")]
    pub index: u64,
    /// latest global sequence (block_num << 32 + index)
    #[prost(uint64, tag="12")]
    pub global_sequence: u64,
    /// -- balance change --
    ///
    /// storage_change.address
    #[prost(bytes="vec", tag="20")]
    pub contract: ::prost::alloc::vec::Vec<u8>,
    /// keccak_address_map.get(storage_change.key)
    #[prost(bytes="vec", tag="21")]
    pub address: ::prost::alloc::vec::Vec<u8>,
    #[prost(string, tag="22")]
    pub old_balance: ::prost::alloc::string::String,
    #[prost(string, tag="23")]
    pub new_balance: ::prost::alloc::string::String,
    /// -- debug --
    #[prost(enumeration="super::super::super::algorithm::v1::Algorithm", tag="100")]
    pub algorithm: i32,
    /// trx.type
    #[prost(string, tag="101")]
    pub r#type: ::prost::alloc::string::String,
    /// balance_change.reason
    #[prost(string, tag="102")]
    pub reason: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Transfer {
    /// -- transaction --
    #[prost(bytes="vec", optional, tag="5")]
    pub transaction_id: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    /// -- call --
    #[prost(bytes="vec", optional, tag="8")]
    pub caller: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    /// -- ordinal --
    ///
    /// log.ordinal or call.begin_ordinal or trx.begin_ordinal
    #[prost(uint64, tag="10")]
    pub ordinal: u64,
    /// relative index
    #[prost(uint64, tag="11")]
    pub index: u64,
    /// latest global sequence (block_num << 32 + index)
    #[prost(uint64, tag="12")]
    pub global_sequence: u64,
    /// -- transfer --
    ///
    /// log.address
    #[prost(bytes="vec", tag="20")]
    pub contract: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="21")]
    pub from: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="22")]
    pub to: ::prost::alloc::vec::Vec<u8>,
    #[prost(string, tag="23")]
    pub value: ::prost::alloc::string::String,
    /// -- debug --
    #[prost(enumeration="super::super::super::algorithm::v1::Algorithm", tag="100")]
    pub algorithm: i32,
    /// trx.type
    #[prost(string, tag="101")]
    pub r#type: ::prost::alloc::string::String,
}
// @@protoc_insertion_point(module)
