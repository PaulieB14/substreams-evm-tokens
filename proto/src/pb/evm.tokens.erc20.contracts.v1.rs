// @generated
// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Events {
    #[prost(message, repeated, tag="1")]
    pub contract_changes: ::prost::alloc::vec::Vec<ContractChange>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ContractChange {
    /// -- transaction --
    #[prost(bytes="vec", tag="5")]
    pub transaction_id: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="6")]
    pub from: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="7")]
    pub to: ::prost::alloc::vec::Vec<u8>,
    // -- call --
    // TO-DO: add caller field
    // <https://github.com/pinax-network/substreams-evm-tokens/issues/17>
    // bytes caller = 8;

    /// -- ordering --
    ///
    /// log.ordinal
    #[prost(uint64, tag="10")]
    pub ordinal: u64,
    /// relative index
    #[prost(uint64, tag="11")]
    pub index: u64,
    /// latest global sequence (block_num << 32 + index)
    #[prost(uint64, tag="12")]
    pub global_sequence: u64,
    /// -- contract --
    #[prost(bytes="vec", tag="20")]
    pub address: ::prost::alloc::vec::Vec<u8>,
    #[prost(string, tag="21")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag="22")]
    pub symbol: ::prost::alloc::string::String,
    #[prost(int32, tag="23")]
    pub decimals: i32,
    /// -- debug --
    #[prost(enumeration="Algorithm", tag="99")]
    pub algorithm: i32,
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Algorithm {
    Unspecified = 0,
    /// ERC-20
    ///
    /// log event
    Log = 1,
    /// RPC call
    Rpc = 5,
}
impl Algorithm {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Algorithm::Unspecified => "ALGORITHM_UNSPECIFIED",
            Algorithm::Log => "ALGORITHM_LOG",
            Algorithm::Rpc => "ALGORITHM_RPC",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ALGORITHM_UNSPECIFIED" => Some(Self::Unspecified),
            "ALGORITHM_LOG" => Some(Self::Log),
            "ALGORITHM_RPC" => Some(Self::Rpc),
            _ => None,
        }
    }
}
// @@protoc_insertion_point(module)
