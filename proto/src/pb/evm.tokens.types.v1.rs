// @generated
// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Events {
    #[prost(message, repeated, tag="2")]
    pub transfers: ::prost::alloc::vec::Vec<Transfer>,
    #[prost(message, repeated, tag="3")]
    pub balance_changes: ::prost::alloc::vec::Vec<BalanceChange>,
    #[prost(message, repeated, tag="4")]
    pub contracts: ::prost::alloc::vec::Vec<Contract>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BalanceChange {
    /// -- transaction --
    #[prost(bytes="vec", tag="5")]
    pub transaction_id: ::prost::alloc::vec::Vec<u8>,
    /// -- ordering --
    ///
    /// storage_change.ordinal or balance_change.ordinal
    #[prost(uint64, tag="10")]
    pub ordinal: u64,
    /// latest global sequence of the balance change (block_num << 32 + index)
    #[prost(uint64, tag="11")]
    pub global_sequence: u64,
    /// -- balance change --
    ///
    /// storage_change.address
    #[prost(bytes="vec", tag="20")]
    pub contract: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="21")]
    pub owner: ::prost::alloc::vec::Vec<u8>,
    #[prost(string, tag="22")]
    pub old_balance: ::prost::alloc::string::String,
    #[prost(string, tag="23")]
    pub new_balance: ::prost::alloc::string::String,
    /// -- debug --
    #[prost(enumeration="Algorithm", tag="99")]
    pub algorithm: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Transfer {
    /// -- transaction --
    #[prost(bytes="vec", tag="5")]
    pub transaction_id: ::prost::alloc::vec::Vec<u8>,
    /// -- ordinal --
    ///
    /// log.ordinal or call.begin_ordinal or trx.begin_ordinal
    #[prost(uint64, tag="10")]
    pub ordinal: u64,
    /// latest global sequence of the transfer (block_num << 32 + index)
    #[prost(uint64, tag="11")]
    pub global_sequence: u64,
    /// -- transfer --
    ///
    /// log.address
    #[prost(bytes="vec", tag="20")]
    pub contract: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="21")]
    pub from: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="22")]
    pub to: ::prost::alloc::vec::Vec<u8>,
    #[prost(string, tag="23")]
    pub value: ::prost::alloc::string::String,
    /// -- debug --
    #[prost(enumeration="Algorithm", tag="99")]
    pub algorithm: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Contract {
    /// -- transaction --
    #[prost(bytes="vec", tag="5")]
    pub transaction_id: ::prost::alloc::vec::Vec<u8>,
    /// -- contract --
    #[prost(bytes="vec", tag="10")]
    pub address: ::prost::alloc::vec::Vec<u8>,
    #[prost(string, tag="11")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag="12")]
    pub symbol: ::prost::alloc::string::String,
    #[prost(int32, tag="13")]
    pub decimals: i32,
    /// -- debug --
    #[prost(enumeration="Algorithm", tag="99")]
    pub algorithm: i32,
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Algorithm {
    Unspecified = 0,
    /// ERC-20
    ///
    /// log event
    Log = 1,
    /// call
    Call = 2,
    /// child calls
    ChildCalls = 3,
    /// which the balances grow over time due to accrued interest
    RebasingToken = 4,
    /// Native (ETH)
    ///
    /// block balance changes
    Block = 10,
    /// failed transaction
    Failed = 11,
    /// gas fee consumed
    Gas = 12,
    /// from transaction
    Transaction = 13,
    /// system contract
    System = 14,
    /// Contracts
    ///
    /// contract creation
    ContractCreation = 20,
}
impl Algorithm {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Algorithm::Unspecified => "ALGORITHM_UNSPECIFIED",
            Algorithm::Log => "ALGORITHM_LOG",
            Algorithm::Call => "ALGORITHM_CALL",
            Algorithm::ChildCalls => "ALGORITHM_CHILD_CALLS",
            Algorithm::RebasingToken => "ALGORITHM_REBASING_TOKEN",
            Algorithm::Block => "ALGORITHM_BLOCK",
            Algorithm::Failed => "ALGORITHM_FAILED",
            Algorithm::Gas => "ALGORITHM_GAS",
            Algorithm::Transaction => "ALGORITHM_TRANSACTION",
            Algorithm::System => "ALGORITHM_SYSTEM",
            Algorithm::ContractCreation => "ALGORITHM_CONTRACT_CREATION",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ALGORITHM_UNSPECIFIED" => Some(Self::Unspecified),
            "ALGORITHM_LOG" => Some(Self::Log),
            "ALGORITHM_CALL" => Some(Self::Call),
            "ALGORITHM_CHILD_CALLS" => Some(Self::ChildCalls),
            "ALGORITHM_REBASING_TOKEN" => Some(Self::RebasingToken),
            "ALGORITHM_BLOCK" => Some(Self::Block),
            "ALGORITHM_FAILED" => Some(Self::Failed),
            "ALGORITHM_GAS" => Some(Self::Gas),
            "ALGORITHM_TRANSACTION" => Some(Self::Transaction),
            "ALGORITHM_SYSTEM" => Some(Self::System),
            "ALGORITHM_CONTRACT_CREATION" => Some(Self::ContractCreation),
            _ => None,
        }
    }
}
// @@protoc_insertion_point(module)
