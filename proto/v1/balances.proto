syntax = "proto3";

package evm.tokens.balances.v1;
import "v1/ethereum.proto";

message Events {
  repeated Transfer transfers = 1;
  repeated BalanceChange balance_changes = 2;
}

enum Algorithm {
  ALGORITHM_UNSPECIFIED = 0;
  ALGORITHM_LOG = 1; // log event
  ALGORITHM_CALL = 2; // call
  ALGORITHM_CHILD_CALLS = 3; // child calls
  ALGORITHM_REBASING_TOKEN = 4; // which the balances grow over time due to accrued interest
  ALGORITHM_RPC = 5; // RPC call
  ALGORITHM_RPC_FAIL = 6; // RPC call missing
  ALGORITHM_BALANCE_NOT_MATCH_TRANSFER = 7; // storage change does not match transfer value

  ALGORITHM_BLOCK = 10; // block balance changes
  ALGORITHM_FAILED = 11; // failed transaction
  ALGORITHM_GAS = 12; // gas fee consumed
  ALGORITHM_TRANSACTION = 13; // from transaction
  ALGORITHM_TRANSACTION_FEE = 14; // from transaction fee
  ALGORITHM_TRANSACTION_FEE_BURN = 15; // from transaction fee burned EIP-1559
  ALGORITHM_TRANSACTION_FEE_PRIORITY_FEE = 16; // from transaction fee tip EIP-1559
  ALGORITHM_SYSTEM = 20; // system contract
  ALGORITHM_BLOCK_REWARD = 21; // block reward paid to miner
}

message BalanceChange {
  // -- transaction --
  optional bytes transaction_id = 5;

  // -- call --
  optional bytes caller = 8;

  // -- ordering --
  uint64 ordinal = 10; // storage_change.ordinal or balance_change.ordinal
  uint64 index = 11; // relative index
  uint64 global_sequence = 12; // latest global sequence (block_num << 32 + index)

  // -- balance change --
  bytes contract = 20; // storage_change.address
  bytes address = 21; // keccak_address_map.get(storage_change.key)
  optional string old_balance = 22;
  string new_balance = 23;

  // -- debug --
  Algorithm algorithm = 100;
  optional sf.ethereum.type.v2.TransactionTrace.Type trx_type = 101; // trx.type
  optional sf.ethereum.type.v2.CallType call_type = 102; // call.call_type
  optional sf.ethereum.type.v2.BalanceChange.Reason reason = 103; // balance_change.reason
}

message Transfer {
  // -- transaction --
  optional bytes transaction_id = 5;

  // -- call --
  optional bytes caller = 8;

  // -- ordinal --
  uint64 ordinal = 10; // log.ordinal or call.begin_ordinal or trx.begin_ordinal
  uint64 index = 11; // relative index
  uint64 global_sequence = 12; // latest global sequence (block_num << 32 + index)

  // -- transfer --
  bytes contract = 20; // log.address
  bytes from = 21;
  bytes to = 22;
  string value = 23;

  // -- debug --
  Algorithm algorithm = 100;
  sf.ethereum.type.v2.TransactionTrace.Type trx_type = 101; // trx.type
  sf.ethereum.type.v2.CallType call_type = 102; // call.call_type
}
